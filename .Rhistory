states <- readOGR("shp/cb_2015_us_state_5m.shp",
layer = "cb_2015_us_state_5m", GDAL1_integer64_policy = TRUE)
states$ALAND["Alaksa"]
states$ALAND["Alaska"]
states$ALAND["alaska"]
states$ALAND$Alaska
states$ALAND
max(states$ALAND)
states
max(states$ALAND)
which.max(states$ALAND)
states$ALAND[33]
states$AWATER[33]
which.max(states$AWATER)
1.477946e+12 + 245391672906
runApp()
runApp()
states <- readOGR("shp/gz_2010_us_040_00_20m.shp",
layer = "gz_2010_us_040_00_20m", GDAL1_integer64_policy = TRUE)
states$CENSUSAREA
which.max(states$CENSUSAREA)
max(states$CENSUSAREA)
runApp()
runApp()
counties <- readOGR("shp/cb_2015_us_county_20m.shp",
layer = "cb_2015_us_county_20m", GDAL1_integer64_policy = TRUE)
counties$ALAND
runApp()
runApp()
values$highlight
input$map_shape_mouseover$id
help("leaflet")
runApp()
runApp()
runApp()
runApp()
library("h5", lib.loc="/home2/blake/shinytest/packrat/lib/x86_64-redhat-linux-gnu/3.3.2")
shiny::runApp()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library('rhdf5')
df = h5read("hailevents.h5","hailevents")
df
df = h5read("hailevents.h5","hailevents")
df = h5read("hailevents.h5","/hailevents")
df
df["hailevents/block1_values"]
df["hailevents/block0_values"]
df["hailevents/block1_items"]
df["block1_items"]
df$states
library(h5)
df <- h5read("hailevents.h5","/hailevents")
df
df <- h5file("hailevents.h5")
df
df['hailevents']
df['hailevents/block0_values']
df['hailevents/block0_values'][0]
df['hailevents/block0_values[0]']
df['hailevents/block0_values']
df['hailevents/block0_values'][1:3]
df['hailevents/block0_values'][1]
df['hailevents/block0_values'][0]
df['hailevents/block0_values'][1]
df['hailevents/block0_values'][1:9]
df['hailevents/block0_values'][1,1]
df['hailevents/block0_values'][1]
df['hailevents/block1_values'][1]
str(df)
h5ls(df)
df <- h5dump("hailevents.h5")
df
h5ls("hailevents.h5")
f <- h5file("hailevents.h5")
f$hailevents
f['hailevents']
f['hailevents/block1_items']
f['hailevents/block1_items'][:]
f['hailevents/block1_items'][]
f['hailevents/block0_items'][]
h5ls("hailevents.h5")
str(f)
str(f['hailevents'])
str(f['/hailevents'])
str(f['/hailevents/block1_values'])
h5ls("hailevents.h5", "hailevents")
f['hailevents/block0_items'][]
f['hailevents/block0_items']
f['hailevents/block0_items'][]
h5ls("hailevents.h5")
f['hailevents/block1_items'][]
f['hailevents/block1_values'][]
f['hailevents/block0_values'][]
f.h5close()
f.close()
h5ls("hailevents.h5")
h5close()
h5close(f)
f <- rhdf5::h5read("hailevents.h5", "hailevents")
f <- rhdf5::h5read("hailevents.h5", "hailevents/block1_values")
f <- rhdf5::h5read("hailevents.h5", "hailevents/states")
h5close(f)
rhdf5::h5close(f)
f
rhdf5::h5close(f)
h5close()
h5close(f)
f <- h5file("hailevents.h5")
h5ls("hailevents.h5")
h5close(f)
h5ls("hailevents.h5")
h5close(f)
h5ls("hailevents.h5")
h5ls("hailevents.h5")
h5close(f)
h5ls("hailevents.h5")
h5ls("hailevents.h5")
H5close()
h5ls("hailevents.h5")
h5ls("hailevents.h5")
h5ls("hailevents.h5")
h5ls("hailevents.h5")
h5ls("hailevents.h5")
h5ls("hailevents.h5")
h5ls("hailevents.h5")
h5ls("hailevents.h5")
h5ls("hailevents.h5")
f <- h5file("hailevents.h5")
f
str(f)
f['events']
f['events/hail']
f['events/hail/_i_table']
hailindex <- f['events/hail/_i_table/index']
hailindex
hailindex
hailindex['idicesLR']
hailindex['idicesLR'][]
hailindex <- f['events/hail/_i_table/states']
hailindex
hailindex[]
str(hailindex)
hailindex <- f['events/hail/_i_table/states/sortedLR']
hailindex[]
hailindex
hailindex[]
H5close()
f <- rhdf5::read("hailevents.h5")
f <- rhdf5::h5read("hailevents.h5")
f <- rhdf5::h5read("hailevents.h5","event/hail")
H5close()
f <- rhdf5::h5read("hailevents.h5","events/hail")
f
str(f)
f$_`_i_table`
f$'_i_table`
$states
sldfj
)
]
}
exit
``
`
''
'
f$table$state
f
f$`_i_table`
f$`_i_table`$state
f$`_i_table`$states
f$table$state
f$table$month
str(f$table$month)
str(f$table$event_id)
f$table$event_id
type(r)
type(f)
str(f)
str(f$table)
H5close()
f <- rhdf5::h5read("hailevents.h5","events/hail/table")
str(f)
H5close()
haildf <- h5read("hailevents.h5","events/hail/table")
str(f)
H5close()
haildf <- h5read("hailevents.h5","events/hail/table")
str(haildf)
head(haildf)
haildf
haildf
haildf(state)
haildf("state")
haildf["state"]
haildf$state
haildf$state == "KANSAS"
haildf[state == "KANSAS"]
haildf["state" == "KANSAS"]
tolower(haildf$month)
tolower(haildf$month) == tolower("may")
tolower(haildf$month) == tolower("may") & tolower(haildf$state) == tolower("kansas")
selectdata <-tolower(haildf$month) == tolower("may") & tolower(haildf$state) == tolower("kansas")
selectdata
selectdata <-haildf[which(tolower(haildf$month) == tolower("may") & tolower(haildf$state) == tolower("kansas"))]
selectdata <-haildf[which(tolower(haildf$month) == tolower("may") & tolower(haildf$state) == tolower("kansas")),]
selectdata
selectdata <-haildf[which(tolower(haildf$month) == tolower("january") & tolower(haildf$state) == tolower("kansas")),]
selectdata
selectdata <-haildf[which(tolower(haildf$month) == tolower("may") & tolower(haildf$state) == tolower("kansas")),]
count(selectdata$state)
len(selectdata)
length(selectdata)
selectdata <-haildf[which(tolower(haildf$month) == tolower("may") & tolower(haildf$state) == tolower("kansas")),]
length(selectdata)
length(selectdata)[]
length(selectdata)[1,]
length(selectdata)[,1]
length(selectdata)[1]
str(selectdata)
length(selectdata[1])
length(selectdata[,1])
selectdata <-haildf[which(tolower(haildf$month) == tolower("may")),]
length(selectdata[,1])
states <- readOGR("shp/cb_2015_us_state_20m.shp",
layer = "cb_2015_us_state_20m", GDAL1_integer64_policy = TRUE)
states$STATEFP
states$NAME
str(states)
str(states$NAME)
str(states$NAME)[]
states$NAME
length(selectdata[,1])
selectdata$state
stateCount <- function(current_state) {
match_events <- selectdata[ which(tolower(selectdata$state) == tolower(current_state)),]
nevents <- length(match_events[,1])
}
stateCount("KANSAS")
stateCount("KANSAS")
stateCount <- function(current_state) {
match_events <- selectdata[ which(tolower(selectdata$state) == tolower(current_state)),]
nevents <- length(match_events[,1])
return(nevents)
}
stateCount("KANSAS")
stateCount("MINAE")
stateCount("MAINE")
stateCount("KANSAS")
help("apply")
help("sapply")
help("mapply")
stateCount <- function(current_state) {
match_events <- selectdata[ which(tolower(selectdata$state) == tolower(current_state)),]
nevents <- length(match_events[,1])
return(nevents)
}
event_counts <- sapply(states$NAME, stateCount)
event_counts
states$NAME
runApp()
states$STATEFP
runApp()
months(1)
help(months)
month.name
month.name[1]
runApp()
help("reactiveValues")
runApp()
help("observe")
help("observeevemt")
help("observeevent")
help("observeEvent")
help("input")
help("sliderInput")
help("renderLeaflet")
help(leaflet)
help("leafletOutput")
help("eventReactive")
runApp()
runApp()
runApp()
eventReactive(input$month, {})
runApp()
runApp()
runApp()
help("print")
print(state.name)
print(state.name[1])
slidermonth <- eventReactive(input$month, {})
str(slidermonth)
help("sliderInput")
help(renderplot)
help(renderPlot)
help("renderLeaflet")
help("leaflet")
help("leafletOptions")
runApp()
runApp()
help("leafletProxy")
runApp()
runApp()
runApp()
runApp()
help("reactive")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(sapply)
help(apply)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("colorBin")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("checkboxInput")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("colorBin")
help("addLegend")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("clearMarkers")
help("addCircles")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("clearMarkers")
help("addMarkers")
runApp()
help("leafletProxy")
runApp()
runApp()
runApp()
help("addMarkers"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("addAwesomeMarkers")
help("addmargins")
help("addMarkers")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(leaflet)
import leaflet
library(leaflet)
help(leaflet)
shiny::runApp()
help("readOGR")
runApp()
runApp()
help("addCircleMarkers"
)
runApp()
runApp()
runApp()
runApp()
runApp()
help("removeGeneric")
runApp()
help("clearShapes")
runApp()
runApp()
runApp()
runApp()
help("layersControlOptions")
help("addCircleMarkers")
help("addCircles")
help("layersControlOptions")
help("clearShapes")
runApp()
runApp()
runApp()
runApp()
help("removeShape")
help("addTiles")
runApp()
runApp()
runApp()
help("removeShape")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("addCircleMarkers)
)
""
"
help("addCircleMarkers")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
